{"version":3,"sources":["webpack:///./node_modules/timers-browserify/main.js","webpack:///src/components/public/Editor.vue","webpack:///./src/components/public/Editor.vue?e5b8","webpack:///./src/components/public/Editor.vue","webpack:///src/components/article/index.vue","webpack:///./src/components/article/index.vue?9f83","webpack:///./src/components/article/index.vue","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/wangeditor/release/wangEditor.js"],"names":["global","scope","self","window","apply","Function","prototype","Timeout","id","clearFn","this","_id","_clearFn","exports","setTimeout","call","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","__webpack_require__","setImmediate","clearImmediate","Editor","name","data","editorContent","mounted","_this","editor","release_wangEditor_default","a","$refs","customConfig","onchange","html","uploadImgServer","lyList","i","push","alt","src","style","emotions","title","type","content","create","public_Editor","render","_h","$createElement","_c","_self","staticStyle","text-align","staticRenderFns","components_public_Editor","normalizeComponent","article","components","created","$http","get","$route","params","then","res","console","log","methods","unTime","time","dateForm","form","components_article","_vm","staticClass","class","notContent","domProps","textContent","_s","_v","attrs","_e","innerHTML","article_Component","article_normalizeComponent","ssrContext","__webpack_exports__","process","undefined","registerImmediate","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","toString","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","length","addEventListener","attachEvent","callback","args","Array","task","run","factory","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","div","nodeType","selectorResult","replace","trim","children","result","querySelectorAll","$","constructor","forEach","fn","elem","clone","deep","cloneList","cloneNode","index","first","last","on","types","split","e","target","matches","off","removeEventListener","attr","key","val","getAttribute","setAttribute","addClass","className","arr","filter","join","removeClass","css","currentStyle","resultArr","map","show","hide","childNodes","append","$children","child","remove","parent","parentElement","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","value","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","config","menus","fontNames","colors","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","success","fail","error","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","objForEach","obj","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","_rendered","_show","Head","droplist","width","_command","FontSize","FontName","fontName","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","minWidth","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","sty","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","_this2","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$trs","trLength","tr","locationData","$currentTr","newTr","trData","tdIndex","$currentTd","toLowerCase","$table","textValId","width30","width50","width100","delBtn","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","tabsConfig","fileElem","click","fileList","insertLinkImg","tabsConfigResult","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","getData","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","tag","attrData","attrList","attributes","attrListLength","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","Date","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","img","onload","onerror","onabort","_this3","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","readyState","status","responseText","JSON","parse","customInsert","errno","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","editorId","toolbarSelector","textSelector","_initConfig","assign","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","txt","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","currentHtml","_offAllEvent","varArgs","TypeError","to","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","wangEditor","module"],"mappings":"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","file":"static/js/1.e80991670f57a223b7cb.js","sourcesContent":["var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/timers-browserify/main.js\n// module id = 162o\n// module chunks = 1","<template>\r\n  <div>\r\n    <div ref=\"editor\" style=\"text-align:left\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'wangeditor/release/wangEditor.css'\r\nimport E from 'wangeditor'\r\nexport default {\r\n  name: 'editor',\r\n  data () {\r\n    return {\r\n      editorContent: ''\r\n    }\r\n  },\r\n  mounted () {\r\n    var editor = new E(this.$refs.editor)\r\n    editor.customConfig.onchange = (html) => {\r\n      this.editorContent = html\r\n    }\r\n    let imgRoot = 'http://120.78.221.235/img/emoji/'\r\n    editor.customConfig.uploadImgServer = '/upload'\r\n\r\n    // 表情配置\r\n    let lyList = []\r\n    let i = 1\r\n    for (i; i < 21; i++) {\r\n      lyList.push({\r\n        alt: '加載中...',\r\n        src: `${imgRoot}${i}.jpg`,\r\n        style: 'width: 59px'\r\n      })\r\n    }\r\n    editor.customConfig.emotions = [\r\n      {\r\n        title: '凜音',\r\n        type: 'image',\r\n        content: lyList\r\n      }\r\n    ]\r\n    editor.create()\r\n  }\r\n}\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/public/Editor.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"editor\",staticStyle:{\"text-align\":\"left\"}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1393c285\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/public/Editor.vue\n// module id = null\n// module chunks = ","var normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Editor.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Editor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1393c285\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Editor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/public/Editor.vue\n// module id = null\n// module chunks = ","<template>\r\n  <div class=\"content-row single clearfix\">\r\n    <div :class=\"['content-box', 'article-index', { 'notContent': !article['title'] }]\">\r\n      <header>\r\n        <h2 class=\"article-title\" v-text=\"article['title']\"></h2>\r\n        <h3 class=\"article-info\">\r\n          <span>shilaimu 发表于：<i class=\"iconfont icon-shizhong\" title=\"时间\">{{ article['createTime'] && unTime(article['createTime']) }}</i></span>\r\n          <span>\r\n            <i class=\"iconfont icon-liaotian1\" title=\"回复\">{{ article['msgMe'] }}</i>\r\n            <i class=\"iconfont icon-liulan\" title=\"浏览\">{{ article['lookCount'] }}</i>\r\n          </span>\r\n          <ul v-if=\"!article['title']\" class=\"notCon\">\r\n            <li class=\"notP\"></li>\r\n            <li></li>\r\n            <li class=\"notEnd\"></li>\r\n            <li class=\"notP\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li class=\"notEnd\"></li>\r\n            <li class=\"notP\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li class=\"notEnd\"></li>\r\n          </ul>\r\n        </h3>\r\n      </header>\r\n      <div class=\"article-body\" v-html=\"article['content']\"></div>\r\n      <Editor class=\"editor\" ref=\"editor\"></Editor>\r\n      <button class=\"button-v1 send\">发送</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Time from '@pub/dateForm'\r\nimport Editor from '@pub/Editor'\r\nimport { setInterval } from 'timers';\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      article: []\r\n    }\r\n  },\r\n  components: { Editor },\r\n  created () {\r\n    this.$http.get('article/' + this.$route.params.id)\r\n      .then(res => {\r\n        this.article = res.data\r\n      })\r\n    console.log(this.$refs.editor.editorContent)\r\n  },\r\n  methods: {\r\n    unTime: time => Time.form('yyyy-MM-dd HH:mm:ss', time * 1000)\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n  .notContent {\r\n    @bgColor: #d6d6d6;\r\n\r\n    .notCon {\r\n      width: 90%;\r\n      border-top: 1px solid #ccc;\r\n      margin: 40px auto 0;\r\n    }\r\n\r\n    .article-title {\r\n      width: 30%;\r\n      height: 1.5rem;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n      background-color: @bgColor;\r\n      border-radius: 1rem;\r\n      transition: 1s;\r\n    }\r\n    .notCon {\r\n      li {\r\n        width: 100%;\r\n        height: 1.5rem;\r\n        margin: 1.5rem auto;\r\n        background-color: @bgColor;\r\n        border-radius: 1rem;\r\n      }\r\n\r\n      .notP {\r\n        width: 90%;\r\n        margin-right: 0;\r\n      }\r\n      .notEnd {\r\n        width: 50%;\r\n        margin-left: 0;\r\n      }\r\n    }\r\n  }\r\n  .article-index {\r\n    .notContent header {\r\n      width: 90%;\r\n      border-bottom: 1px solid #ccc;\r\n      margin: 0 auto 30px;\r\n    }\r\n    .article-title {\r\n      font-size: 2em;\r\n      text-align: center;\r\n    }\r\n\r\n    .article-info {\r\n      text-align: center;\r\n      font-weight: 400;\r\n      color: #555;\r\n    }\r\n\r\n    i {\r\n      margin: 0 5px 0 15px;\r\n      color: #888;\r\n      &::before {\r\n        margin-right: 5px;\r\n      }\r\n    }\r\n    .article-body {\r\n      width: 80%;\r\n      padding-bottom: 30px;\r\n      border-bottom: 1px solid #ccc;\r\n      margin: 0 auto 20px;\r\n      font-size: 1.2rem;\r\n\r\n      p {\r\n        text-indent: 2em;\r\n        word-break: break-all;\r\n      }\r\n    }\r\n    .ql-editor {\r\n      display: block;\r\n      min-height: 200px;\r\n    }\r\n    .send {\r\n      float: right;\r\n      width: 30%;\r\n      max-width: 150px;\r\n      border: 0;\r\n      margin: 20px;\r\n    }\r\n  }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/article/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content-row single clearfix\"},[_c('div',{class:['content-box', 'article-index', { 'notContent': !_vm.article['title'] }]},[_c('header',[_c('h2',{staticClass:\"article-title\",domProps:{\"textContent\":_vm._s(_vm.article['title'])}}),_vm._v(\" \"),_c('h3',{staticClass:\"article-info\"},[_c('span',[_vm._v(\"shilaimu 发表于：\"),_c('i',{staticClass:\"iconfont icon-shizhong\",attrs:{\"title\":\"时间\"}},[_vm._v(_vm._s(_vm.article['createTime'] && _vm.unTime(_vm.article['createTime'])))])]),_vm._v(\" \"),_c('span',[_c('i',{staticClass:\"iconfont icon-liaotian1\",attrs:{\"title\":\"回复\"}},[_vm._v(_vm._s(_vm.article['msgMe']))]),_vm._v(\" \"),_c('i',{staticClass:\"iconfont icon-liulan\",attrs:{\"title\":\"浏览\"}},[_vm._v(_vm._s(_vm.article['lookCount']))])]),_vm._v(\" \"),(!_vm.article['title'])?_c('ul',{staticClass:\"notCon\"},[_c('li',{staticClass:\"notP\"}),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li',{staticClass:\"notEnd\"}),_vm._v(\" \"),_c('li',{staticClass:\"notP\"}),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li',{staticClass:\"notEnd\"}),_vm._v(\" \"),_c('li',{staticClass:\"notP\"}),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li'),_vm._v(\" \"),_c('li',{staticClass:\"notEnd\"})]):_vm._e()])]),_vm._v(\" \"),_c('div',{staticClass:\"article-body\",domProps:{\"innerHTML\":_vm._s(_vm.article['content'])}}),_vm._v(\" \"),_c('Editor',{ref:\"editor\",staticClass:\"editor\"}),_vm._v(\" \"),_c('button',{staticClass:\"button-v1 send\"},[_vm._v(\"发送\")])],1)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4acf3efb\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/article/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4acf3efb\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!less-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4acf3efb\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/article/index.vue\n// module id = null\n// module chunks = ","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/setimmediate/setImmediate.js\n// module id = mypn\n// module chunks = 1","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: []\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: []\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.minWidth || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    var sty = item.style;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" ' + (sty ? 'style=\"' + sty + '\"' : \"\") + ' data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('min-height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\n// var inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAABhQAAsAAAAAGAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABCAAAAGAAAABgDxIPBGNtYXAAAAFoAAABBAAAAQQrSf4BZ2FzcAAAAmwAAAAIAAAACAAAABBnbHlmAAACdAAAEvAAABLwfpUWUWhlYWQAABVkAAAANgAAADYQp00kaGhlYQAAFZwAAAAkAAAAJAfEA+FobXR4AAAVwAAAAIQAAACEeAcD7GxvY2EAABZEAAAARAAAAERBSEX+bWF4cAAAFogAAAAgAAAAIAAsALZuYW1lAAAWqAAAAYYAAAGGmUoJ+3Bvc3QAABgwAAAAIAAAACAAAwAAAAMD3gGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA8fwDwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEAOgAAAA2ACAABAAWAAEAIOkG6Q3pEulH6Wbpd+m56bvpxunL6d/qDepc6l/qZepo6nHqefAN8BTxIPHc8fz//f//AAAAAAAg6QbpDekS6UfpZel36bnpu+nG6cvp3+oN6lzqX+pi6mjqcep38A3wFPEg8dzx/P/9//8AAf/jFv4W+Bb0FsAWoxaTFlIWURZHFkMWMBYDFbUVsxWxFa8VpxWiEA8QCQ7+DkMOJAADAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAACAAD/wAQAA8AABAATAAABNwEnAQMuAScTNwEjAQMlATUBBwGAgAHAQP5Anxc7MmOAAYDA/oDAAoABgP6ATgFAQAHAQP5A/p0yOxcBEU4BgP6A/YDAAYDA/oCAAAQAAAAABAADgAAQACEALQA0AAABOAExETgBMSE4ATEROAExITUhIgYVERQWMyEyNjURNCYjBxQGIyImNTQ2MzIWEyE1EwEzNwPA/IADgPyAGiYmGgOAGiYmGoA4KCg4OCgoOED9AOABAEDgA0D9AAMAQCYa/QAaJiYaAwAaJuAoODgoKDg4/biAAYD+wMAAAAIAAABABAADQAA4ADwAAAEmJy4BJyYjIgcOAQcGBwYHDgEHBhUUFx4BFxYXFhceARcWMzI3PgE3Njc2Nz4BNzY1NCcuAScmJwERDQED1TY4OXY8PT8/PTx2OTg2CwcICwMDAwMLCAcLNjg5djw9Pz89PHY5ODYLBwgLAwMDAwsIBwv9qwFA/sADIAgGBggCAgICCAYGCCkqKlktLi8vLi1ZKiopCAYGCAICAgIIBgYIKSoqWS0uLy8uLVkqKin94AGAwMAAAAAAAgDA/8ADQAPAABsAJwAAASIHDgEHBhUUFx4BFxYxMDc+ATc2NTQnLgEnJgMiJjU0NjMyFhUUBgIAQjs6VxkZMjJ4MjIyMngyMhkZVzo7QlBwcFBQcHADwBkZVzo7Qnh9fcxBQUFBzH19eEI7OlcZGf4AcFBQcHBQUHAAAAEAAAAABAADgAArAAABIgcOAQcGBycRISc+ATMyFx4BFxYVFAcOAQcGBxc2Nz4BNzY1NCcuAScmIwIANTIyXCkpI5YBgJA1i1BQRUZpHh4JCSIYGB5VKCAgLQwMKCiLXl1qA4AKCycbHCOW/oCQNDweHmlGRVArKClJICEaYCMrK2I2NjlqXV6LKCgAAQAAAAAEAAOAACoAABMUFx4BFxYXNyYnLgEnJjU0Nz4BNzYzMhYXByERByYnLgEnJiMiBw4BBwYADAwtICAoVR4YGCIJCR4eaUZFUFCLNZABgJYjKSlcMjI1al1eiygoAYA5NjZiKysjYBohIEkpKCtQRUZpHh48NJABgJYjHBsnCwooKIteXQAAAAACAAAAQAQBAwAAJgBNAAATMhceARcWFRQHDgEHBiMiJy4BJyY1JzQ3PgE3NjMVIgYHDgEHPgEhMhceARcWFRQHDgEHBiMiJy4BJyY1JzQ3PgE3NjMVIgYHDgEHPgHhLikpPRESEhE9KSkuLikpPRESASMjelJRXUB1LQkQBwgSAkkuKSk9ERISET0pKS4uKSk9ERIBIyN6UlFdQHUtCRAHCBICABIRPSkpLi4pKT0REhIRPSkpLiBdUVJ6IyOAMC4IEwoCARIRPSkpLi4pKT0REhIRPSkpLiBdUVJ6IyOAMC4IEwoCAQAABgBA/8AEAAPAAAMABwALABEAHQApAAAlIRUhESEVIREhFSEnESM1IzUTFTMVIzU3NSM1MxUVESM1MzUjNTM1IzUBgAKA/YACgP2AAoD9gMBAQECAwICAwMCAgICAgIACAIACAIDA/wDAQP3yMkCSPDJAku7+wEBAQEBAAAYAAP/ABAADwAADAAcACwAXACMALwAAASEVIREhFSERIRUhATQ2MzIWFRQGIyImETQ2MzIWFRQGIyImETQ2MzIWFRQGIyImAYACgP2AAoD9gAKA/YD+gEs1NUtLNTVLSzU1S0s1NUtLNTVLSzU1SwOAgP8AgP8AgANANUtLNTVLS/61NUtLNTVLS/61NUtLNTVLSwADAAAAAAQAA6AAAwANABQAADchFSElFSE1EyEVITUhJQkBIxEjEQAEAPwABAD8AIABAAEAAQD9YAEgASDggEBAwEBAAQCAgMABIP7g/wABAAAAAAACAB7/zAPiA7QAMwBkAAABIiYnJicmNDc2PwE+ATMyFhcWFxYUBwYPAQYiJyY0PwE2NCcuASMiBg8BBhQXFhQHDgEjAyImJyYnJjQ3Nj8BNjIXFhQPAQYUFx4BMzI2PwE2NCcmNDc2MhcWFxYUBwYPAQ4BIwG4ChMIIxISEhIjwCNZMTFZIyMSEhISI1gPLA8PD1gpKRQzHBwzFMApKQ8PCBMKuDFZIyMSEhISI1gPLA8PD1gpKRQzHBwzFMApKQ8PDysQIxISEhIjwCNZMQFECAckLS1eLS0kwCIlJSIkLS1eLS0kVxAQDysPWCl0KRQVFRTAKXQpDysQBwj+iCUiJC0tXi0tJFcQEA8rD1gpdCkUFRUUwCl0KQ8rEA8PJC0tXi0tJMAiJQAAAAAFAAD/wAQAA8AAGwA3AFMAXwBrAAAFMjc+ATc2NTQnLgEnJiMiBw4BBwYVFBceARcWEzIXHgEXFhUUBw4BBwYjIicuAScmNTQ3PgE3NhMyNz4BNzY3BgcOAQcGIyInLgEnJicWFx4BFxYnNDYzMhYVFAYjIiYlNDYzMhYVFAYjIiYCAGpdXosoKCgoi15dampdXosoKCgoi15dalZMTHEgISEgcUxMVlZMTHEgISEgcUxMVisrKlEmJiMFHBtWODc/Pzc4VhscBSMmJlEqK9UlGxslJRsbJQGAJRsbJSUbGyVAKCiLXl1qal1eiygoKCiLXl1qal1eiygoA6AhIHFMTFZWTExxICEhIHFMTFZWTExxICH+CQYGFRAQFEM6OlYYGRkYVjo6QxQQEBUGBvcoODgoKDg4KCg4OCgoODgAAAMAAP/ABAADwAAbADcAQwAAASIHDgEHBhUUFx4BFxYzMjc+ATc2NTQnLgEnJgMiJy4BJyY1NDc+ATc2MzIXHgEXFhUUBw4BBwYTBycHFwcXNxc3JzcCAGpdXosoKCgoi15dampdXosoKCgoi15dalZMTHEgISEgcUxMVlZMTHEgISEgcUxMSqCgYKCgYKCgYKCgA8AoKIteXWpqXV6LKCgoKIteXWpqXV6LKCj8YCEgcUxMVlZMTHEgISEgcUxMVlZMTHEgIQKgoKBgoKBgoKBgoKAAAQBl/8ADmwPAACkAAAEiJiMiBw4BBwYVFBYzLgE1NDY3MAcGAgcGBxUhEzM3IzceATMyNjcOAQMgRGhGcVNUbRobSUgGDWVKEBBLPDxZAT1sxizXNC1VJi5QGB09A7AQHh1hPj9BTTsLJjeZbwN9fv7Fj5AjGQIAgPYJDzdrCQcAAAAAAgAAAAAEAAOAAAkAFwAAJTMHJzMRIzcXIyURJyMRMxUhNTMRIwcRA4CAoKCAgKCggP8AQMCA/oCAwEDAwMACAMDAwP8AgP1AQEACwIABAAADAMAAAANAA4AAFgAfACgAAAE+ATU0Jy4BJyYjIREhMjc+ATc2NTQmATMyFhUUBisBEyMRMzIWFRQGAsQcIBQURi4vNf7AAYA1Ly5GFBRE/oRlKjw8KWafn58sPj4B2yJULzUvLkYUFPyAFBRGLi81RnQBRks1NUv+gAEASzU1SwAAAAACAMAAAANAA4AAHwAjAAABMxEUBw4BBwYjIicuAScmNREzERQWFx4BMzI2Nz4BNQEhFSECwIAZGVc6O0JCOzpXGRmAGxgcSSgoSRwYG/4AAoD9gAOA/mA8NDVOFhcXFk41NDwBoP5gHjgXGBsbGBc4Hv6ggAAAAAABAIAAAAOAA4AACwAAARUjATMVITUzASM1A4CA/sCA/kCAAUCAA4BA/QBAQAMAQAABAAAAAAQAA4AAPQAAARUjHgEVFAYHDgEjIiYnLgE1MxQWMzI2NTQmIyE1IS4BJy4BNTQ2Nz4BMzIWFx4BFSM0JiMiBhUUFjMyFhcEAOsVFjUwLHE+PnEsMDWAck5OcnJO/gABLAIEATA1NTAscT4+cSwwNYByTk5yck47bisBwEAdQSI1YiQhJCQhJGI1NExMNDRMQAEDASRiNTViJCEkJCEkYjU0TEw0NEwhHwAAAAcAAP/ABAADwAADAAcACwAPABMAGwAjAAATMxUjNzMVIyUzFSM3MxUjJTMVIwMTIRMzEyETAQMhAyMDIQMAgIDAwMABAICAwMDAAQCAgBAQ/QAQIBACgBD9QBADABAgEP2AEAHAQEBAQEBAQEBAAkD+QAHA/oABgPwAAYD+gAFA/sAAAAoAAAAABAADgAADAAcACwAPABMAFwAbAB8AIwAnAAATESERATUhFR0BITUBFSE1IxUhNREhFSElIRUhETUhFQEhFSEhNSEVAAQA/YABAP8AAQD/AED/AAEA/wACgAEA/wABAPyAAQD/AAKAAQADgPyAA4D9wMDAQMDAAgDAwMDA/wDAwMABAMDA/sDAwMAAAAUAAAAABAADgAADAAcACwAPABMAABMhFSEVIRUhESEVIREhFSERIRUhAAQA/AACgP2AAoD9gAQA/AAEAPwAA4CAQID/AIABQID/AIAAAAAABQAAAAAEAAOAAAMABwALAA8AEwAAEyEVIRchFSERIRUhAyEVIREhFSEABAD8AMACgP2AAoD9gMAEAPwABAD8AAOAgECA/wCAAUCA/wCAAAAFAAAAAAQAA4AAAwAHAAsADwATAAATIRUhBSEVIREhFSEBIRUhESEVIQAEAPwAAYACgP2AAoD9gP6ABAD8AAQA/AADgIBAgP8AgAFAgP8AgAAAAAABAD8APwLmAuYALAAAJRQPAQYjIi8BBwYjIi8BJjU0PwEnJjU0PwE2MzIfATc2MzIfARYVFA8BFxYVAuYQThAXFxCoqBAXFhBOEBCoqBAQThAWFxCoqBAXFxBOEBCoqBDDFhBOEBCoqBAQThAWFxCoqBAXFxBOEBCoqBAQThAXFxCoqBAXAAAABgAAAAADJQNuABQAKAA8AE0AVQCCAAABERQHBisBIicmNRE0NzY7ATIXFhUzERQHBisBIicmNRE0NzY7ATIXFhcRFAcGKwEiJyY1ETQ3NjsBMhcWExEhERQXFhcWMyEyNzY3NjUBIScmJyMGBwUVFAcGKwERFAcGIyEiJyY1ESMiJyY9ATQ3NjsBNzY3NjsBMhcWHwEzMhcWFQElBgUIJAgFBgYFCCQIBQaSBQUIJQgFBQUFCCUIBQWSBQUIJQgFBQUFCCUIBQVJ/gAEBAUEAgHbAgQEBAT+gAEAGwQGtQYEAfcGBQg3Ghsm/iUmGxs3CAUFBQUIsSgIFxYXtxcWFgkosAgFBgIS/rcIBQUFBQgBSQgFBgYFCP63CAUFBQUIAUkIBQYGBQj+twgFBQUFCAFJCAUGBgX+WwId/eMNCwoFBQUFCgsNAmZDBQICBVUkCAYF/eMwIiMhIi8CIAUGCCQIBQVgFQ8PDw8VYAUFCAACAAcASQO3Aq8AGgAuAAAJAQYjIi8BJjU0PwEnJjU0PwE2MzIXARYVFAcBFRQHBiMhIicmPQE0NzYzITIXFgFO/vYGBwgFHQYG4eEGBh0FCAcGAQoGBgJpBQUI/dsIBQUFBQgCJQgFBQGF/vYGBhwGCAcG4OEGBwcGHQUF/vUFCAcG/vslCAUFBQUIJQgFBQUFAAAAAQAjAAAD3QNuALMAACUiJyYjIgcGIyInJjU0NzY3Njc2NzY9ATQnJiMhIgcGHQEUFxYXFjMWFxYVFAcGIyInJiMiBwYjIicmNTQ3Njc2NzY3Nj0BETQ1NDU0JzQnJicmJyYnJicmIyInJjU0NzYzMhcWMzI3NjMyFxYVFAcGIwYHBgcGHQEUFxYzITI3Nj0BNCcmJyYnJjU0NzYzMhcWMzI3NjMyFxYVFAcGByIHBgcGFREUFxYXFhcyFxYVFAcGIwPBGTMyGhkyMxkNCAcJCg0MERAKEgEHFf5+FgcBFQkSEw4ODAsHBw4bNTUaGDExGA0HBwkJCwwQDwkSAQIBAgMEBAUIEhENDQoLBwcOGjU1GhgwMRgOBwcJCgwNEBAIFAEHDwGQDgcBFAoXFw8OBwcOGTMyGRkxMRkOBwcKCg0NEBEIFBQJEREODQoLBwcOAAICAgIMCw8RCQkBAQMDBQxE4AwFAwMFDNRRDQYBAgEICBIPDA0CAgICDAwOEQgJAQIDAwUNRSEB0AINDQgIDg4KCgsLBwcDBgEBCAgSDwwNAgICAg0MDxEICAECAQYMULYMBwEBBwy2UAwGAQEGBxYPDA0CAgICDQwPEQgIAQECBg1P/eZEDAYCAgEJCBEPDA0AAAIAAP+3A/8DtwATADkAAAEyFxYVFAcCBwYjIicmNTQ3ATYzARYXFh8BFgcGIyInJicmJyY1FhcWFxYXFjMyNzY3Njc2NzY3NjcDmygeHhq+TDdFSDQ0NQFtISn9+BcmJy8BAkxMe0c2NiEhEBEEExQQEBIRCRcIDxITFRUdHR4eKQO3GxooJDP+mUY0NTRJSTABSx/9sSsfHw0oek1MGhsuLzo6RAMPDgsLCgoWJRsaEREKCwQEAgABAAAAAAAA9evv618PPPUACwQAAAAAANbEBFgAAAAA1sQEWAAA/7cEAQPAAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAD//wQBAAEAAAAAAAAAAAAAAAAAAAAhBAAAAAAAAAAAAAAAAgAAAAQAAAAEAAAABAAAAAQAAMAEAAAABAAAAAQAAAAEAABABAAAAAQAAAAEAAAeBAAAAAQAAAAEAABlBAAAAAQAAMAEAADABAAAgAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAMlAD8DJQAAA74ABwQAACMD/wAAAAAAAAAKABQAHgBMAJQA+AE2AXwBwgI2AnQCvgLoA34EHgSIBMoE8gU0BXAFiAXgBiIGagaSBroG5AcoB+AIKgkcCXgAAQAAACEAtAAKAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGljb21vb24AaQBjAG8AbQBvAG8AblZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGljb21vb24AaQBjAG8AbQBvAG8Abmljb21vb24AaQBjAG8AbQBvAG8AblJlZ3VsYXIAUgBlAGcAdQBsAGEAcmljb21vb24AaQBjAG8AbQBvAG8AbkZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// // 将 css 代码添加到 <style> 中\n// var style = document.createElement('style');\n// style.type = 'text/css';\n// style.innerHTML = inlinecss;\n// document.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 1"],"sourceRoot":""}